import { GoogleGenerativeAI } from '@google/generative-ai';
import dotenv from 'dotenv';

dotenv.config();

const apiKey = process.env.GEMINI_API_KEY;
if (!apiKey) {
  console.warn('GEMINI_API_KEY not set. Bot replies will fail.');
}

const genAI = new GoogleGenerativeAI(apiKey || '');
const model = () => genAI.getGenerativeModel({ model: 'gemini-1.5-flash' });

// Heur√≠stica de respaldo por si el modelo no devuelve JSON v√°lido
function deriveEmotionFromText(text) {
  if (!text) return 'feliz';
  const t = String(text).toLowerCase()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '');

  // Emojis
  if (/[üòÇü§£üòäüôÇüòÅüòÑüòç‚ù§Ô∏è‚ú®üôåüéâ]/u.test(t)) return 'feliz';
  if (/[üòûüòîüò¢üò≠üòìüò©üò°üíî]/u.test(t)) return 'triste';

  // Palabras clave (aj√∫stalas a tu dominio)
  const positives = [
    'me alegra','felicidade','excelente','genial','maravilloso','que bien',
    'orgullo','lograste','me encanta','bravo','gracias'
  ];
  const negatives = [
    'lo siento','lamento','triste','dificil','complicado','preocup',
    'ansiedad','deprim','fracaso','mal','duro','duele'
  ];

  const posHit = positives.some(w => t.includes(w));
  const negHit = negatives.some(w => t.includes(w));

  if (posHit && !negHit) return 'feliz';
  if (negHit && !posHit) return 'triste';

  return 'feliz';
}

// Genera respuesta de Gemini. Devuelve { text, emotion, crisis }
export async function generateBotReply(messages) {
  // messages: [{author, content}]
  const history = messages.map(m => ({
    role: m.author === 'user' ? 'user' : 'model',
    parts: [{ text: m.content }]
  }));

  // Pedimos al modelo devolver SOLO JSON v√°lido
  const systemGuidance = `
Act√∫a como un acompa√±ante virtual de apoyo emocional y regulaci√≥n de emociones.

Principios:
1. Tono: c√°lido, emp√°tico, cercano, profesional sin sonar cl√≠nico.
2. Objetivo: ayudar a que la persona se exprese, identifique y regule emociones; ofrecer psicoeducaci√≥n ligera.
3. No juzgar ni minimizar. Usa validaci√≥n emocional.
4. Fomenta autoconciencia con preguntas abiertas suaves.
5. Respuestas de 2‚Äì5 p√°rrafos cortos como m√°ximo.
6. No des consejos m√©dicos ni diagn√≥sticos. En riesgo, sugiere ayuda profesional/urgencias locales.
7. Promueve respiraci√≥n consciente, grounding, journaling, pausas, contacto social saludable.

DEVUELVE ESTRICTAMENTE JSON V√ÅLIDO con esta forma:
{
  "answer": "texto al usuario (en espa√±ol, sin markdown)",
  "emotion": "feliz" | "triste",
  "crisis": true | false
}

Reglas para "emotion":
- Usa "triste" si el contenido central del mensaje es de validaci√≥n/acompa√±amiento ante dolor, frustraci√≥n, p√©rdida, ansiedad o malestar predominante.
- Usa "feliz" cuando reconozcas avances, alivio, gratitud o tono mayormente esperanzador/positivo.
- Marca "crisis": true si detectas ideaci√≥n o riesgo de suicidio/autolesi√≥n, violencia de pareja/familiar, abuso sexual, peligro inmediato o incapacidad de mantenerse a salvo ahora mismo. En duda, deja en false.
- No devuelvas otros campos ni comentarios fuera del JSON.
`;

  const generationConfig = {
    responseMimeType: 'application/json',
  };

  const result = await model().generateContent({
    contents: [
      { role: 'user', parts: [{ text: systemGuidance }] },
      ...history
    ],
    generationConfig
  });

  // Intentar parsear JSON
  let text = '';
  let emotion = 'feliz';
  let crisis = false;
  try {
    const raw = result.response.text(); // deber√≠a ser JSON puro
    const parsed = JSON.parse(raw);
    text = String(parsed?.answer || '').trim();
    const e = String(parsed?.emotion || '').toLowerCase();
    emotion = (e === 'feliz' || e === 'triste') ? e : deriveEmotionFromText(text);
    crisis = Boolean(parsed?.crisis);
  } catch {
    // Fallback si no vino JSON v√°lido
    const fallback = result.response.text() || '';
    text = fallback.trim();
    emotion = deriveEmotionFromText(text);
  }

  // Devuelve listo para el frontend/API: { text, emotion, crisis }
  return { text, emotion, crisis };
}


